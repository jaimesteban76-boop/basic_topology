import basic_topology.Operations

variable {X Y: Type*}


def dense (𝒯: Set (Set X)) (A: Set X): Prop :=
  ∀ U ∈ 𝒯, Set.Nonempty U → Set.Nonempty (A ∩ U)

theorem dense_univ (𝒯: Set (Set X)): dense 𝒯 Set.univ := by
  simp [dense]

theorem dense_iff_dense_in_base (𝒯 ℬ: Set (Set X)) (h: base 𝒯 ℬ) (A: Set X): dense 𝒯 A ↔ ∀ U ∈ ℬ, Set.Nonempty U → Set.Nonempty (A ∩ U) := by
  sorry

-- some theorems ? Q is dense, I is dense, is C is countable then Cᶜ is dense

theorem discrete_dense_iff (A: Set X): dense Set.univ A ↔ A = Set.univ := by
  constructor
  · intro h
    apply Set.eq_univ_of_univ_subset
    intro x _
    simp [dense] at h
    exact Set.inter_singleton_nonempty.mp (h {x} (by exists x))
  · intro h
    rw [h]
    apply dense_univ

theorem indiscrete_dense (A: Set X): Set.Nonempty A → dense {∅, Set.univ} A := by
  intro h
  simp [dense]
  intro--
  exact h

-- theorem: dense in euclidean topology iff. dense in sorgenfry
theorem dense_iff (𝒯: Set (Set X)) (A: Set X): dense 𝒯 A ↔ closure 𝒯 A = Set.univ := by
  constructor
  · intro h
    apply Set.eq_univ_of_univ_subset
    intro x _
    simp_all [closure, adherent, dense]
    intro N hN
    simp_all [Nbhds, neighborhood]
    obtain ⟨U, hU1, hU2, hU3⟩ := hN
    have := h U hU1 (by exists x)
    rw [Set.inter_comm]
    exact Set.Nonempty.mono (Set.inter_subset_inter (fun ⦃a⦄ a ↦ a) hU3) this
  · intro h
    simp [dense]
    intro U hU1 hU2
    simp_all [closure, adherent]
    obtain ⟨x, hx⟩ := hU2
    have: x ∈ Set.univ := by exact trivial
    rw [←h] at this
    simp at this
    have: ∀ N ∈ Nbhds 𝒯 x, (N ∩ A).Nonempty := this
    have: U ∈ Nbhds 𝒯 x := by
      simp [Nbhds]
      exact open_neighborhood 𝒯 hx hU1
    rw [Set.inter_comm]
    (expose_names; exact this_1 U this)

theorem dense_antimono {𝒯₁ 𝒯₂: Set (Set X)} (h1: 𝒯₁ ⊆ 𝒯₂) {A: Set X} (h2: dense 𝒯₂ A): dense 𝒯₁ A := by
  intro U hU1
  exact h2 U (h1 hU1)

-- example: Z is dense in the topology generated by [a,infty)
